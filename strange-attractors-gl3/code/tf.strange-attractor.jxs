<jittershader name="tf.strange-attractor.jxs">
	<description>Transform Feedback Strange Attractors</description>
	<param name="position" type="vec3" state="POSITION" />
	<param name="velocity" type="vec3" state="NORMAL" />
	<param name="speed" type="float" default="1" />
	<param name="speed_lo" type="float" default="1" />
	<param name="speed_hi" type="float" default="1" />
	<param name="attractor" type="int" default="1" />
	<language name="glsl" version="1.5">
		<bind param="position" program="vp" />
		<bind param="velocity" program="vp" />
		<bind param="speed" program="vp" />
		<bind param="speed_lo" program="vp" />
		<bind param="speed_hi" program="vp" />
		<bind param="attractor" program="vp" />
		<program name="vp" type="vertex">

<![CDATA[

//==============================================================================
// Strange Attractors in GLSL Vertex Shader Transform Feedback
//
// written by Timo Hoogland, 2019
// as part of the Max8 GL3 Package Examples
//
// www.timohoogland.com
//==============================================================================

#version 330 core
float a;
float b;
float c;
float d;
float f;
float g;

float dt;

uniform float speed;
uniform float speed_lo;
uniform float speed_hi;
uniform int attractor;

in vec3 position;
in vec3 velocity;

out vec3 Position1;
out vec3 Velocity1;

void main() {
	vec3 pos = position;
	float pSpeed = (velocity.x * abs(speed_hi - speed_lo) + min(speed_lo, speed_hi)) * speed;
	// float pSpeed = speed * velocity.x;
	float x = position.x;
	float y = position.y;
	float z = position.z;

	float dx, dy, dz;

	// lorenz attractor
	if (attractor == 1){
		dt = 0.005 * pSpeed;
		a = 10;
		b = 28;
		c = 8/3;

		dx = dt * (a * (y - x));
		dy = dt * (x * (b - z) - y);
		dz = dt * (x * y - c * z);
	}

	// Arneodo Attractor
	else if (attractor == 2){
		dt = 0.015 * pSpeed;
		a = -5.5;
		b = 3.5;
		c = -1;

		dx = dt * y;
		dy = dt * z;
		dz = dt * (-a * x - b * y - z + c * pow(x, 3));
	}

	// Burke - Shaw Attractor
	else if (attractor == 3){
		dt = 0.003 * pSpeed;
		a = 10;
		b = 4.272;

		dx = dt * (-a * (x + y));
		dy = dt * (-y - a * x * z);
		dz = dt * (a * x * y + b);
	}
	
	// Chen - Lee Attractor
	else if (attractor == 4){
		dt = 0.002 * pSpeed;	
		a = 5;
		b = -10;
		c = -0.38;

		dx = dt * (a * x - y * z);
		dy = dt * (b * y + x * z);
		dz = dt * (c * z + x * (y / 3));
	}
	
	// Aizawa Attractor
	else if (attractor == 5){
		dt = 0.01 * pSpeed;
		a = 0.95;
		b = 0.7;
		c = 0.1;
		d = 3.5;
		f = 0.25;
		g = 0.6;

		dx = dt * ((z - b) * x - d * y);
		dy = dt * (d * x + (z - b) * y);
		dz = dt * (g + a * z - (z*z*z)/3 - (x*x + y*y) * (1 + f*z) + c * z * (x*x*x));
	}
	
	// Thomas Attractor
	else if (attractor == 6){
		dt = 0.05 * pSpeed;	
		a = 0.19;

		dx = dt * (-a * x + sin(y));
		dy = dt * (-a * y + sin(z));
		dz = dt * (-a * z + sin(x));
	}

	// lorenz mod2 attractor
	else if (attractor == 7){
		dt = 0.005 * pSpeed;
		a = 0.9;
		b = 5;
		c = 9.9;
		d = 1;

		dx = dt * (-a * x + (y*y) - (z*z) + a * c);
		dy = dt * (x * (y - b * z) + d);
		dz = dt * (-z + x * (b * y + z));
	}
	
	// Hadley Attractor
	else if (attractor == 8){
		dt = 0.005 * pSpeed;		
		a = 0.2;
		b = 4;
		c = 8;
		d = 1;

		dx = dt * (-(y*y) - (z*z) - a * x + a * c);
		dy = dt * (x * y - b * x * z - y + d);
		dz = dt * (b * x * y + x * z - z);
	}
	
	// Halvorsen Attractor
	else if (attractor == 9){
		dt = 0.005 * pSpeed;
		a = 1.4;

		dx = dt * (-a*x - 4*y - 4*z - y*y);
		dy = dt * (-a*y - 4*z - 4*x - z*z);
		dz = dt * (-a*z - 4*x - 4*y - x*x);
	}
	
	// Three-Scroll Unified Chaotic System Attractor
	else if (attractor == 10){
		dt = 0.002 * pSpeed;	
		a = 40;
		b = 0.833;
		c = 20;
		d = 0.5;
		f = 0.65;

		dx = dt * (a * (y - x) + d*x*z);
		dy = dt * (c*y - x*z);
		dz = dt * (b*z + x*y - f * (x*x));
	}
	
	// Coullet Attractor
	else if (attractor == 11){
		dt = 0.04 * pSpeed;	
		a = 0.8;
		b = -1.1;
		c = -0.45;
		d = -1;

		dx = dt * (y);
		dy = dt * (z);
		dz = dt * (a*x + b*y + c*z + d*(x*x*x));
	}

	// Dadras Attractor
	else if (attractor == 12){
		dt = 0.01 * pSpeed;
		a = 3;
		b = 2.7;
		c = 1.7;
		d = 2;
		f = 9;

		dx = dt * (y - a*x + b*y*z);
		dy = dt * (c*y - x*z + z);
		dz = dt * (d*x*y - f*z);
	}

	vec3 attractorForce = vec3(dx, dy, dz);
	
	Position1 = position + attractorForce;
	Velocity1 = velocity;
}
]]>
		</program>

		<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
void main() 
{
}
		]]>
		</program>
	</language>
</jittershader>